package Comparator_Comparable;


public class 포괄적인정의 {
	/*
	 * Comparator과 Comparable은 모두 인터페이스로 컬렉션을 정렬하는데 필요한 메서드를 정의하고 있으며, 
	 * Comparable을 구현하고 있는 클래스들은 같은 타입의 인스턴스끼리 서로 비교할 수 있는 클래스들, 
	 * 주로 Integer과 같은 Wrapper클래스와 String, Data, File과 같은 것들이며 기본적으로 오름차순으로
	 * 정렬되도록 구현되어 있다.
	 * 
	 * 그래서 Comparable을 구현한 클래스는 정렬이 가능하다는 것을 의미한다.
	 * 
	 * Comparable 기본 정렬기준을 구현하는데 사용.
	 * Comparator 기존 정렬 기준 외에 다른 기준으로 정렬하고자 할 때 사용.
	 *
	 *
	 * 두 인터페이스는 근본적으로는 "객체를 비교할 수 있도록 만드는 것"이다. 
	 * 
	 * 기본 자료형들은 부등호로 비교하기 쉽다. 하지만 객체들은 간단히 비교할 수가 없다.
	 * 그 이유는 객체들을 비교하기 위한 "기준"이 없기 때문이다.
	 * 
	 * 이 두 인터페이스를 구현함으로써 "기준"을 정의해준다.
	 * 
	 * 차이점은 인터페이스에 선언된 메서드인데, 메서드의 파라미터 개수가 다르다.
	 * 
	 * Comparable의 메서드인 compare(T o)은 하나의 객체를 파라미터로 가져온다.
	 * => 자기 자신과 매개변수 객체를 비교하는 것.
	 * 
	 * Comparator의 메서드인 compareTo(T o1, T o2)는 두 객체를 파라미터로 가져온다.
	 * => 두 매개변수 객체를 비교하는 것.	 
	 * 
	 * 본질적으로 "비교한다"라는 의미는 동일하지만 비교 대상이 다르다.
	 * 
	 * 
	 */
	public static void main(String[] args) {
	}

	
}
