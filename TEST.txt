깃허브 첫 게시물 TEST

BASH 환경으로 접속한다. => 폴더 마우스 오른쪽으로 클릭 Git bash Here 클릭.

<명령어>

cd ..
=> 상위 디렉토리로 이동


cd (Name)
=> 현재 디렉토리의 Name 폴더로 이동


cd /c/test1/test2
=> 절대경로 /c/test2로 이동


mkdir (Name)
=> 현재 디렉토리의 Name으로 폴더 생성


touch (Name.확장자)
=> 현재 디렉토리의 Name.확장자로 파일 생성, 내용은 비어있음.

ls
=> 현재 디렉토리의 폴더와 파일을 보여줌


git init
=> 새로운 저장소를 생성할 때 사용하는 명령어.
=> 프로젝트 초기에 한 번만 사용하므로 잘 사용하지 않는다.
=> Git으로 버전 관리 할 때는 의외로 자주 사용되어 진다.

- init을 하면, master branch가 생성되고 git bash 상에서 현재 폴더명에 (master)이라는 것이 추가된다.
- (master)이라는 branch 이름이 보이면 git 저장소가 설정된 폴더이다.
- 이후 해당 폴더에는 .git이라는 숨김 폴더가 생성됨, 되도록 건드리지말자.


git remote add origin (연동할 github repository url).git
=> 원격 저장소와 연결을 하는 명령어.


git add (Name)
=> 이 명령어를 사용하면 Name에 해당하는 파일은 스테이징 영역으로 이동 시키는 명령어.
=> add 뒤 .은 현재 디렉토리 이하의 모든 변경 내용을 스테이징 영역으로 넘김.
=> add 뒤 -A는 작업 디렉토리 상에 어디에 위치하든 항상 동일하게 모든 변경 내용을 스테이징으로 넘김.
=> 즉 add . 보다 add -A가 범위가 크다, 디렉토리의 최상단에서 add . 명령어를 사용하면, add -A의 기능을 함.
=> add 뒤 Name은 추가할 파일 명을 입력.


git status
=> 작업 디렉토리와 스테이징 영역의 상태를 확인하는 명령어.
=> Changes to be committed: 이 영역은 스테이징 영역(Staging Area)에 넘어가 있는 변경 내용을 보여줌.
=> Changes not staged for commit: 이 영역은 아직 작업 디렉토리에 있는 변경 내용을 보여줌.
=> Untracked files: 아직 작업 디렉토리에 있는 한 번도 해당 Git 저장소가 관리한 적이 없는 새로운 파일울 보여줌.


Staging Area란?
=> 스테이징 영역은 작업 디렉토리와 git 저장소의 변경 이력 사이에 징검다리 역할을 한다.
=> 작업 디렉토리는 commit 전,자유롭게 수정할 수 있는 공간인 반면, 
=> 스테이징 영역은 commit 할 준비가 된 내용이 git 저장소에 기록되기 전 대기하는 장소.
=> git add 명령어를 사용하여, 현재 작업 디렉토리에 있는 일부 또는 모든 변경 내용을 스테이징 영역으로 이동 시킴.


git commit -m "메세지"
=> add 명령어를 통해 지정한 파일들을 commit 하는 명령어,
=> 주로 메세지에는 어떤 내용을 commit 하는지 명시함. 


git remote -v
=> 현재 디렉토리와 연결된 github repository 주소를 출력해 주는 명령어.


git push origin master
=> 전송될 데이터들이 나오면서 commit한 데이터가 github에 올라간 것을 확인하는 명령어.


git remote remove origin
=> 기존에 연결되어있는 원격 저장소와의 연결을 끊는 명령어.


git config --list
=> 현재 저장소별 설정 정보 조회

git config --list
=> 전역 저장소별 설정 정보 조회