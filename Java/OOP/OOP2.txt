■ 상속
- 상속이란 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것이다.
- 상속을 통해 클래슬르 작성하면 보다 적은 양의 코드로 새로운 클래스를 작성할 수 있고 코드를 공통적으로 관리할 수 있다.
=> 코드의 추가 및 변경이 용이하다.
=> 코드의 재사용성을 높이고, 코드의 중복을 제거하여 프로그램의 생산성과 유지보수에 크게 기여한다.

Class parent{}

Class child extends parent{}

parent 클래스는 조상클래스이며, child클래스는 자손 클래스이다.

- 자손클래스는 조상클래스의 모든 멤버를 상속 받기 때문에, child 클래스는 parent 클래스의 멤버들을 포함한다고 할 수 있다.
- 조상클래스가 변경되면 자손 클래스는 자동으로 영향을 받게 되지만, 자손 클래스가 변경되면, 조상 클래스는 영향을 받지 않는다.
=> 즉, 자손 클래스는 조상 클래스의 모든 멤버를 상속 받는다. 단, 생성자와 생성자 블럭은 상속받지 못한다.
=> 자손클래스의 멤버 개수는 조상클래스보다 항상 같거나 많다.

- 자손 클래스의 인스턴스를 생성하면 조상클래스의 멤버도 함께 생성되기 때문에 따로 조상클래스의 인스턴스를 생성하지 않고도 조상클래스의 멤버들을 사용할 수 있다.


■ 포함 관계
- 상속 이외에도 클래스를 재사용하는 또 다른 방법은, 클래스 간에 포함 관계를 맺어 주는 것.
- 포함관계지만, 한 클래스의 멤버변수로 다른 클래스 타입의 참조 변수를 선언하는 것.
ex)
class circle {
int x;
int y;
int r;
}

class point {
int x;
int y;
}

=> class circle{
point c = new point();
int z;
}


■ 클래스간의 관계 정리 
- ~은 ~이다 (is-a 관계) => 상속관계
- ~은 ~을 가지고 있다(has-a) => 포함 관계


■ 단일 상속
- 자바는 단일 상속을 채택하여 사용 중.
- 다중 상속 시 , 조상들의 이름만 같은 메서드의 충돌 우려.
- 단일 상속으로 단일 클래스 간의 관계가 보다 명확해지고 코드를 더욱 신뢰할 수 있게 만듦.


■ Object 클래스
- Object 클래스는 모든 클래스 상속 계층의 최상위에 있는 조상 클래스이다.
- extends를 명시하지 않은 클래스들은 자동으로 object 클래스를 상속받는다.


■ 오버라이딩
- 조상클래스로부터 상속받은 메서드의 내용을 변경하는 것을 오버라이딩이라고 한다.
- 조상클래스로부터 상속받은 메서드를 자손클래스 자신에게 맞게 변경해야하는 경우를 지칭한다.

1. 접근제어자는 모든 클래스의 메서드보다 좁은 범위로 변경할 수 있다.
2. 조상클래스의 메서드보다 많은 수의 예외를 선언할 수 없다.
3. 메서드의 선언부가 같아야한다. (이름, 매개변수, 리턴타입)


■ 참조변수 super
- super은 자손클래스에서 조상클래스로부터 상속받은 멤버를 창조하는데 사용되는 참조변수이다.
- 모두 인스턴스 메서드에는 this와 super가 지역변수로 존재하는데, 이 둘에는 자신이 속한 인스턴스의 주소가 자동으로 저장된다.


■ 조상의 생성자 super()
- this() 처럼 super()도 생성자이다.
- this()는 같은 클래스의 다른 생성자를 호출하는데 사용되지만, super()은 조상의 생성자를 호출하는데 사용된다.
- 클래스 자신에 선언된 변수는 자신의 생성자가 초기화를 책임지도록 작성하는 것이 좋다.
- 생성자는 상속되지 않는다.


■ 패키지
- 클래스의 묶음, 클래스 또는 인터페이스를 포함시킬 수 있다.
- 서로 관련된 클래스들끼리 그룹 단위로 묶어 놓음으로써 클래스를 효율적으로 관리할 수 있다.
- 같은 이름의 클래스일지라도 서로 다른 패키지에 존재하는 것이 가능하다.
- 클래스가 물리적으로 하나의 클래스파일(.class)인 것과 같이 패키지는 물리적으로 하나의 디렉토리이다.
-패키지도 다른 패키지를 포함할 수 있다.


■ 패키지의 선언
- 클래스나 인터페이스의 소스파일(.java)의 맨 뒤에 pakage 패지지명;과 같이 한 줄만 적어주면 된다.
- 하나의 소스파일에 단 한 번만 선언될 수 있다.
- 패키지명은 대소문자 모두 허용하나, 클래스명과 쉽게 구분하기 위해서 소문자로 설정하는 것을 원칙으로 한다.
- 모든 클래스는 반드시 하나의 패키지에 포함되어야한다.
=> 패키지 선언이 없다면 자동으로 이름 없는 패키지(unNamed pakage)에 속하게 된다.


■ classPath => 나중에 공부해보자.


■ inport문
- 다른 패키지의 클래스를 사용할 때 작성함.
- inport로 패키지를 명시하면, 소스코드에서 생략가능(패키지 경로 생략)
- 위치는 패키지 선언 아래, 클래스 선언 위 쪽.

- import 시 , 패키지 앞에 static을 붙이면 static 멤버를 호출할 때 클래스 이름을 생략할 수 있다.
=> 코드가 간결해짐.


■ 제어자
- 제어자(modifier)는 클래스, 변수, 또는 메서드의 선언부에 함께 사용되어 부가적인 의미를 부여한다.
- 접근 제어자 : public, protected, default, private
- 그 외 : static, final, abstract, native, transient, synchronized, volatile, strictfi
- 제어자는 클래스나 멤버 변수, 메서드에 주로 사용되며, 하나의 대상에 대해서 여러 제어자를 조합하며 사용하는 것이 가능하다.
- 단, 접근제어자는 한 번에 하나만 선택해서 사용 가능하다.


■ static 제어자
- 멤버변수, 메서드, 초기화 블럭에서 사용 가능 하다.
- (공통적인)

=> static 멤버변수
- 모든 인스턴스에서 공통적으로 사용되는 클래스 변수가 된다.
- 클래스 변수는 인스턴스를 사용하지 않고도 사용 가능하다.
- 클래스가 메모리에 로드될 때 생성된다.

=> static 메서드
- 인스턴스를 생성하지 않고도 호출이 가능한 static 메서드가 된다.
- static 메서드 내에서는 인스턴스 멤버들을 직접 사용할 수 없다.


■ final 제어자
- 클래스, 메서드, 멤버변수, 지역변수
- (변경할 수 없는)

=> final 클래스
- 변경될 수 없음. 즉, 확장될 수 없는 클래스
- final로 지정된 클래스는 다른 클래스의 조상이 될 수 없다.

=> final 메서드
- 변경될 수 없는 메서드. final로 지정된 메서드는 오버라이딩을 통해 제장의 될 수 없다.

=> final 멤버 및 지역 변수
- 변수 앞에 final이 붙으면 값을 변경할 수 없는 상수가 된다.


■ 접근 제어자
- 멤버 또는 클래스에 사용되어, 해당 멤버 또는 클래스를 외부에서 접근하지 못하도록 제한함.
- 지정되어 있지 않다면 default 로 지정되어 있음.

=> 접근제어자가 사용될 수 있는 곳 - 클래스, 멤버 변수, 메서드, 생성자
- private : 같은 클래스 내에서만 접근이 가능하다.
- default : 같은 패키지 내에서만 접근이 가능하다.
- protected : 같은 패키지 내에서, 그리고 다른 패키지의 자손클래스에서 접근이 가능하다.
- public : 접근 제한이 전혀 없다.

public > protected > default > private


■ 캡슐화 접근 제어자
- 접근 제어자를 사용하는 이유는 클래스의 내부에 선언된 데이터를 보호하기 위해서이다.
- 외부에서 함부로 변경하지 못하도록 하기 위해 외부로부터 접근을 제한하는 것이 필요하다.
- 데이터 감추기라고 하며 객체 지향 개념의 캡슐화에 해당하는 내용이다.
- 또한, 외부에는 불필요하고, 내부적으로만 사용되는 부분을 감추기 위해서이다.

=> getter과 setter 메서드를 이용하여 접근할 수 있도록 하며, 접근시 멤버변수는 제어자를 통해 통제한다.


■ 다형성
- 여러가지 형태를 가질 수 있는 능력
- 자바에서는 한 타입의 참조변수로 여러 타입의 객체를 참조할 수 있도록 함.
=> 조상 클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조할 수 있다.

- 조상 클래스 타입의 참조변수는 자손클래스 타입의 고유한 멤버에 접근할 수 있다.
=> 조상의 멤버만큼 사용 가능, 조상 타입의 참조변수는 자손 타입의 인스턴스를 참조할 수 있다. 

- 반대로 자손타입의 참조변수는 조상타입의 인스턴스를 참조할 수 없다.
=> 자손 클래스의 고유한 멤버를 생성하면, 조상클래스에서는 참조할 수 없기 때문이다.


■ 참조 변수의 형변환
- 서로 상속 관계에 있는 타입간의 형변환을 양방향으로 자유롭게 수행될 수 있으나, 참조변수가 가리키는 인스턴스의 자손타입으로 형변환을 허용하지 않는다.
- 참조변수가 가리키는 인스턴스의 타입이 무엇인지 확인하는 것이 중요하다.


■ instance 연산자
- 참조변수가 참조하고 있는 인스턴스의 실제 차입을 알아보기 위해 사용.
- 주로 조건문에 사용되고 instance of 왼쪽에 참조변수, 오른쪽에 타입이 위치함.
- true를 얻으면 참조변수를 검사한 타입으로 형변환이 가능하다 라는 의미.